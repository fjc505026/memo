
****索引式文件系统(indexed allocation): Ext2 , linux

boot sector

Block Group (1st has superblock, others have duplicate one, for recovery)

superblock(1024b)：记录此 filesystem 的整体信息，包括 inode/block 的总量、使用量、剩余量， 以及文件系统的格式与相关信息等；
inode(128b)：记录文件的属性 读写权限，时间，真正内容pointer，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码；
block：实际记录文件的内容，若文件太大时，会占用多个 block 。

一个目录至少一个inode 与一个block,新增/删除/更名文件名与目录的 w 权限有关, 因为文件名记录在目录的block中

数据存放区域： inode table , data block
meta区域： superblock、 block ，bitmap 与 inode bitmap

****WINDOWS FAT 闪存
链式block, 所以偶尔需要碎片整理

****日志式文件系统 (Journaling filesystem,Ext3/Ext4)
1. 预备：    当系统要写入一个文件时，会先在日志记录区块中纪录某个文件准备要写入的信息；
2. 实际写入：开始写入文件的权限与数据；开始更新 metadata 的数据；
3. 结束：    完成数据与 metadata 的更新后，在日志记录区块当中完成该文件的纪录。

xfs 就是被开发来用于高容量磁盘以及高性能文件系统
data section: 类似 ext 的 block group， 包含 superblock, 剩余空间管理， inode分配与追踪 （与block是动态产生）
log section:日志区，断电恢复
realtime section:实时操作区，文件先分配于这，结束后写入data section


异步处理 (asynchronously)： 磁盘读写慢于内存读写， 操作文档时候， 内容复制到内存，以方便其他磁盘读写，如果文档内容在内存中修改后于磁盘不一致， 依靠系统不定时SYNC


df [-ahikHTm] [目录或文件名]：列出文件系统的整体磁盘使用量；这个目录或者文件是可选，会显示其的mounted point
-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；
-k ：以 KBytes 的容量显示各文件系统；
-m ：以 MBytes 的容量显示各文件系统；
-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；
-H ：以 M=1000K 取代 M=1024K 的进位方式；
-T ：连同该 partition 的 filesystem 名称 (例如 xfs) 也列出；
-i ：不用磁盘容量，而以 inode 的数量来显示

du[] 文件或目录名称  ：评估文件系统的磁盘使用量(常用在推估目录所占容量)
-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。
-h ：以人们较易读的容量格式 (G/M) 显示；
-s ：列出总量而已，而不列出每个各别的目录占用容量；  该目录占用多少空间**
-S ：不包括子目录下的总计，与 -s 有点差别。
-k ：以 KBytes 列出容量显示；
-m ：以 MBytes 列出容量显示；


hard link 只是在某个目录下新增一笔文档名链接到某 inode 号码的关连记录而已， 两个文档连到同一个inode, 安全，删除一个，另外一个还在
           不能跨 Filesystem；不能 link 目录（目录下所有文件都建立hardlink,太复杂）

Symbolic Link (符号链接，亦即是快捷方式)：Symbolic link 就是在建立一个独立的文件，而这个文件会让数据的读取指向他 link 的那个文件的档名！
	       当来源档被删除之后，symbolic link 的文件会『开不了』， 

ln [-sf] 来源文件 目标文件
选项与参数：
-s ：如果不加任何参数就进行连结，那就是 hard link，至于 -s 就是 symbolic link
-f ：如果 目标文件 存在时，就主动的将目标文件直接移除后再建立！

*****分区指令
lsblk [-dfimpt] [device] 列出系统上的所有磁盘列表
选项与参数：
-d ：仅列出磁盘本身，并不会列出该磁盘的分区数据
-f ：同时列出该磁盘内的文件系统名称  UUID全局单一标识符 (universally unique identifier)， blkid
-i ：使用 ASCII 的线段输出，不要使用复杂的编码 (再某些环境下很有用)
-m ：同时输出该装置在 /dev 底下的权限数据 (rwx 的数据)
-p ：列出该装置的完整文件名！而不是仅列出最后的名字而已。
-t ：列出该磁盘装置的详细数据，包括磁盘队列机制、预读写的数据量大小等

parted /dev/vda print  列出模块名称，容量。sector size, MBR or GPT

fdisk/gdisk 装置文件名: MBR 分区表请使用 fdisk 分区， GPT 分区表请使用 gdisk 分区！
『装置文件名』请不要加上数字，因为 partition 是针对『整个磁盘装置』而不是某个 partition 呢！所以执行『 gdisk /dev/vda1 』 就会发生错误啦！要使用 gdisk /dev/vda 才对！

partprobe -s (或reboot)更新 Linux 核心的分区表信息      cat /proc/partitions, lsblk /dev/vda


****磁盘格式化(建置文件系统)
mkfs.xfs 
mkfs.ext4
dumpe2fs -h: command is used to print the super block and blocks group information for the filesystem present on device.


xfs_repair 处理 XFS 文件系统 可以检查/修复文件系统，不过，因为修复文件系统是个很庞大的任务！因此，修复时该文件系统不能被挂载！
fsck.ext4 

****挂载文件系统到某文件夹
blkid /dev/vda4
mount UUID="e0a6af55-26e7-4cb7-a515-826a8bd29e90" /data/xfs
df /data/xfs


****磁盘/文件系统参数修订
mknod 装置文件名 [bcp] [Major] [Minor]  :设定硬件设备参数
	装置种类：
 	b ：设定装置名称成为一个周边储存设备文件，例如磁盘等；
 	c ：设定装置名称成为一个周边输入设备文件，例如鼠标/键盘等；
 	p ：设定装置名称成为一个 FIFO 文件；
	Major ：主要装置代码；
	Minor ：次要装置代码；

xfs_admin [-lu] [-L label] [-U uuid] 装置文件名 :xfs_admin 修改 XFS 文件系统的 UUID 与 Label name
	选项与参数：
	-l ：列出这个装置的 label name
	-u ：列出这个装置的 UUID          
	-L ：设定这个装置的 Label name
	-U ：设定这个装置的 UUID 喔！             uuidgen # 很有趣的指令！可以产生新的 UUID 喔！

tune2fs [-l] [-L Label] [-U uuid] 装置文件名 ：修改 ext4 的 label name 与 UUID
	选项与参数：
	-l ：类似 dumpe2fs -h 的功能～将 superblock 内的数据读出来～
	-L ：修改 LABEL name
	-U ：修改 UUID 啰！

*****开机挂载 /etc/fstab 及 /etc/mtab
[装置/UUID 等] 				   [挂载点] [文件系统] [文件系统参数] [dump] [fsck]
 UUID="e0fa7252-b374-4a06-987a-3cb14f415488" /data/xfs xfs      defaults       0       0
                 















