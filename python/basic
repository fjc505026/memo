
for import module, .pyc will generate :  source code -> compile to -> byte code  (字节码，.pyc文件)   

in Unix like OS: #!/usr/local/bin/python   // The path of python interpreter
                 #!/usr/bin/env python     // search for PATH to locate python interperter 

python will not import a same module twice unless you use reload (from imp import reload), reload is not recursively


For use title in myfile: 
1. from myfile import title # copy title from myfile to current file
   title

2. import myfile            # import myfile 
   myfile.title

   The title is a global vailable in myfile, in other file, if import myfile, the title acts as attribute

   dir(module_name)
   '__doc__': python build-in Variables



sys.path: inited from PYTHONPATH(env var) + standard lib

debug method:
python -i test.py  // stop at corrupt place and print out variables in interactive mode


--- type                    example                                             note
    number(imu)             234, 3.14, 3+4j,Decimal()                           len(),math.sqrt(),random.random(),
    string(imu)             'spam', "Bob's", b'a\x01c', u'sp\xc4m'              len(),string[1],string[1:3],string+'text', string*3,   No:string[1]='x' #immutuable                                   
    list                    [1, [2, 'three'], 4.5], list(range(10))             sequence set
    dictionary              {'food':'spam', 'taste':'yum'}, dict(hours=10)      store data with key, can be nested with list
    tuple(imu)              (1,'spam', 4, 'U'), tuple('spam'), namedtuple
    file                    open('egg.txt'), open(r'C:ham.bin', 'wb')
    set                     set('abc'), {'a', 'b', 'c'}
    other core type         type, None, boolean
    program unit type       function, module, class
    implmentation type      code being compiled, call stack for trace


note : string :string.find('t'),string.replace('stringtobereplced','replacebystring'),string.rstrip().split(',') #rstrip() first
               '{},eggs,{}'.format('I','eat')

---special type
    bytearry              string='test',  bytearry_sample=list[string],  bytearry_sample ->['t','e','s', 't']  #mutuable   bytearry_sample[1]='t', ''.join(bytearry_sample)->'ttst'



